{"version":3,"sources":["utils/ravel.ts","utils/argsort.ts","nms/nms.ts","rpn_msr/generate_anchors.ts","fast_rcnn/bbox_transform.ts","rpn_msr/proposal_layer_tf.ts","utils/resize.ts","text_connector/TextLineCfg.ts","text_connector/other.ts","utils/argmax.ts","text_connector/TextProposalGraphBuilder.ts","text_connector/text_proposal_connector_oriented.ts","text_connector/detectors.ts","utils/RGB2BGR.ts","fast_rcnn/inference_blob.ts","main.ts","demo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ravel","tensor","tf","flatten","arraySync","argSort","array","initial","Array","from","args","sort","a","b","map","item","indexOf","nms","config","method","tf_nms","dets","scores","thresh","authNMS","nonMaxSuppression","x1","slice","shape","squeeze","y1","x2","y2","areas","sub","add","order","reverse","keep","i","cast","concat","xx1","gather","yy1","xx2","yy2","w","h","inter","mul","ovr","lessEqual","inds","scale_anchor","anchor","x_ctr","y_ctr","scaled_anchor","generate_basic_anchors","sizes","base_size","base_anchor","anchors","length","index","x","y","z","set","toTensor","generate_anchors","heights","widths","tile","bbox_transform_inv","boxes","deltas","w1","dtype","reshape","w2","h1","h2","ctr_x","ctr_y","dy","dh","pred_ctr_x","pred_ctr_y","pred_w","pred_h","clip_boxes","im_shape","b1","b2","b3","b4","proposal_layer","cfg","rpn_cls_prob_reshape","rpn_bbox_pred","im_info","test","_feat_stride","_anchors","ANCHOR_SCALES","_num_anchors","console","error","height","width","bbox_deltas","clone","shift_x","shift_y","shifts","A","K","transpose","proposals","_filter_boxes","min_size","pre_nms_topN","nms_thresh","NMS_FUNCTION","table","post_nms_topN","_ws_part_one","_ws_part_two","ws","_hs_part_one","_hs_part_two","hs","cond_part_one","cond_part_two","bitwise","resize_im","im","scale","max_scale","f","Math","min","max","newH","newW","resizeBilinear","TextLineCfg","Graph","graph","this","sub_graphs","firstCondition","any","logicalNot","secondCondition","v","push","argmax","reduce","call","_m","_c","_i","_arr","TextProposalGraphBuilder","text_proposals","boxes_table","im_size","box","results","left","round","adj_box_indices","adj_box_index","meet_v_iou","index1","index2","y0","overlaps_v","size_similarity","succession_index","precursors","get_precursors","forEach","successions","get_successions","is_succession_node","_graph","poly1d","argA","argB","polyfit","_x","_y","xArray","yArray","warn","xMatrix","yMatrix","temp","j","pow","xMatrixT","numeric","dot1","dot","dot2","dotInv","inv","TextProposalConnectorOriented","graph_builder","build_graph","sub_graphs_connected","X","Y","equal","sum","div","p","solve","group_text_proposals","tp_groups","text_lines","tp_indices","text_line_boxes","z1","x0","offset","fit_y","lt_y","rt_y","lb_y","rb_y","score","_text_lines","text_recs","x3","y3","x4","y4","disX","disY","fTmp0","fTmp1","less","TextDetector","mode","text_proposal_connector","DETECT_MODE","size","scoresFlat","greater","keep_inds","sorted_indices","get_text_lines","filter_boxes","_keep_inds","unstack","logicalAnd","RGB2BGR","image","_get_blobs","img","rois","blobs","data","im_orig","PIXEL_MEANS","im_size_min","im_size_max","processed_ims","im_scale_factors","SCALES","im_scale","MAX_SIZE","log","im_list_to_blob","_get_image_blob","_","ims","max_shape","num_images","blob","CTPN","model","startScope","image_swapped","fromPixels","im_scales","HAS_RPN","im_blob","executeAsync","expandDims","raw","cls_prob","box_pred","textDetector","detect","_boxes","print","canvas","color","ctx","getContext","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","Demo","props","_canvasRef","React","createRef","_canvas","_cfg","_model","current","event","reader","FileReader","file","target","files","type","match","readAsDataURL","onload","fileEvent","Image","src","result","complete","predict","predictions","drawImage","draw","className","style","minHeight","minWidth","ref","onChange","onUpload","apply","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.738208d4.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function ravel<T extends tf.Tensor>(tensor: T){\r\n    return tf.tensor( tf.util.flatten(tensor.arraySync()));\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function argSort <T extends tf.Tensor>(tensor: T){\r\n    const array = tensor.arraySync() as number[];\r\n    const initial = Array.from(array);\r\n    const sorted = array.sort((a, b)=>{return a-b});\r\n    const args = sorted.map( item=>{ return initial.indexOf(item)})\r\n    return tf.tensor1d(args);\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport {ravel} from \"../utils/ravel\";\r\nimport {argSort} from \"../utils/argsort\";\r\n\r\ninterface cfg{\r\n    dets: tf.Tensor,\r\n    scores: tf.Tensor,\r\n    thresh: number,\r\n    method: string\r\n}\r\n\r\nexport async function nms(config: cfg){\r\n    return (config.method=='TF')? tf_nms(config.dets, config.scores, config.thresh) : authNMS(config.dets, config.scores, config.thresh);\r\n}\r\n\r\nfunction tf_nms(dets: any, scores: any, thresh: number){\r\n    return tf.image.nonMaxSuppression(dets, ravel(scores) as tf.Tensor1D, 2000, 0.2,thresh);\r\n}\r\n\r\nasync function authNMS(dets: any, scores: any, thresh: number){\r\n\r\n    const x1 = dets.slice([0,0], [dets.shape[0],1]).squeeze(); //x1 = dets[:, 0]\r\n    const y1 = dets.slice([0,1], [dets.shape[0],1]).squeeze(); //y1 = dets[:, 1]\r\n    const x2 = dets.slice([0,2], [dets.shape[0],1]).squeeze(); //x2 = dets[:, 2]\r\n    const y2 = dets.slice([0,3], [dets.shape[0],1]).squeeze(); //y2 = dets[:, 3]\r\n    //const scores = dets.slice([0,4], [dets.shape[0],1]).squeeze(); //y2 = dets[:, 3]\r\n    let areas = tf.mul( x2.sub(x1).add(1), y2.sub(y1).add(1)) ;//areas = (x2 - x1 + 1) * (y2 - y1 + 1)\r\n    // try {\r\n    //     scores = scores.slice(0, 2000) // need to slice to improve performance\r\n    //     areas = areas.slice(0,2000)\r\n    // }catch(e){\r\n    //\r\n    // }\r\n    let order = argSort(scores).reverse();//order = scores.argsort()[::-1]\r\n\r\n    order = ravel(order) as tf.Tensor1D;\r\n    let keep = tf.tensor1d([]);\r\n    while(order.shape[0] > 0){\r\n        const i = order.slice(0,1).cast('int32');\r\n        keep = keep.concat(i.cast('float32')) as tf.Tensor1D;\r\n        const xx1 = tf.maximum(x1.gather(i), x1.gather(order.slice(1,-1).cast('int32') )); //xx1 = np.maximum(x1[i], x1[order[1:]])\r\n        const yy1 = tf.maximum(y1.gather(i), y1.gather(order.slice(1,-1).cast('int32') )); //yy1 = np.maximum(y1[i], y1[order[1:]])\r\n        const xx2 = tf.minimum(x2.gather(i), x2.gather(order.slice(1,-1).cast('int32') )); //xx2 = np.minimum(x2[i], x2[order[1:]])\r\n        const yy2 = tf.minimum(y2.gather(i), y2.gather(order.slice(1,-1).cast('int32') )); //yy2 = np.minimum(y2[i], y2[order[1:]])\r\n        const w = tf.maximum(0.0, xx2.sub(xx1).add(1) ); //w = np.maximum(0.0, xx2 - xx1 + 1)\r\n        const h = tf.maximum(0.0, yy2.sub(yy1).add(1) ); //h = np.maximum(0.0, yy2 - yy1 + 1)\r\n        const inter = w.mul(h);\r\n        const ovr = tf.div(inter, ( (areas.gather(i).add(areas.gather(order.slice(1,-1).cast('int32') ))).sub(inter) ));\r\n        let inds = await tf.whereAsync( ovr.lessEqual(thresh) ); // here is a bottleneck\r\n        inds = ravel(inds) as tf.Tensor2D;\r\n        order = order.gather(inds.add(1).cast('int32') );\r\n\r\n    }\r\n\r\n    return keep;\r\n}\r\n\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nfunction scale_anchor(anchor: any, h: number, w: number): number[] {\r\n    const x_ctr = (anchor[0] + anchor[2]) * 0.5;\r\n    const y_ctr = (anchor[1] + anchor[3]) * 0.5;\r\n\r\n    const scaled_anchor = Array.from(anchor);\r\n    scaled_anchor[0] = ~~(x_ctr - w / 2);\r\n    // xmin\r\n    scaled_anchor[2] = ~~(x_ctr + w / 2);\r\n    // xmax\r\n    scaled_anchor[1] = ~~(y_ctr - h / 2);\r\n    // ymin\r\n    scaled_anchor[3] = ~~(y_ctr + h / 2);\r\n    // ymax\r\n    return scaled_anchor as number[];\r\n}\r\n\r\nfunction generate_basic_anchors(sizes: any, base_size= 16) {\r\n    const base_anchor = [0, 0, base_size - 1, base_size - 1];\r\n    const anchors = tf.buffer([sizes.length, 4], 'int32');\r\n    let index = 0;\r\n    for (let item of sizes) {\r\n        const [x, y, z ,w] = scale_anchor(base_anchor, item[0], item[1]);\r\n        anchors.set(x, index, 0);\r\n        anchors.set(y, index, 1);\r\n        anchors.set(z, index, 2);\r\n        anchors.set(w, index, 3);\r\n        index += 1;\r\n    }\r\n\r\n    return anchors.toTensor();\r\n}\r\nexport function generate_anchors(base_size= 16, ratios= [0.5, 1, 2], scales= [3**2,4**2,5**2,6**2]) {\r\n    const heights = tf.tensor1d([11, 16, 23, 33, 48, 68, 97, 139, 198, 283]);\r\n    const widths = tf.tensor1d([16]);\r\n    const sizes = tf.stack([heights, widths.tile(heights.shape)], 1);\r\n\r\n    return generate_basic_anchors(sizes.arraySync());\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function bbox_transform_inv<T extends tf.Tensor, X extends tf.Tensor>(boxes: T, deltas: X){\r\n\r\n    boxes = boxes.cast(deltas.dtype);\r\n\r\n    const w1 = boxes.slice([0,2], [boxes.shape[0],1]).reshape([boxes.shape[0]]);\r\n    const w2 = boxes.slice([0,0], [boxes.shape[0],1]).reshape([boxes.shape[0]]);\r\n    const h1 = boxes.slice([0,3], [boxes.shape[0],1]).reshape([boxes.shape[0]]);\r\n    const h2 = boxes.slice([0,1], [boxes.shape[0],1]).reshape([boxes.shape[0]]);\r\n\r\n    const widths = tf.add(tf.sub(w1, w2), 1);\r\n    const heights = tf.add(tf.sub(h1,h2), 1);\r\n\r\n    const ctr_x = w2.add(tf.mul(0.5,widths));\r\n    const ctr_y = h2.add(tf.mul(0.5,heights));\r\n\r\n    //const dx = deltas.slice([0,0], [deltas.shape[0],1]);\r\n    const dy = deltas.slice([0,1], [deltas.shape[0],1]);\r\n    //const dw = deltas.slice([0,2], [deltas.shape[0],1]);\r\n    const dh = deltas.slice([0,3], [deltas.shape[0],1]);\r\n\r\n\r\n    const pred_ctr_x = ctr_x.reshape([ctr_x.shape[0],1]);\r\n    const pred_ctr_y = tf.add( tf.mul( dy,   heights.reshape([heights.shape[0],1]) ),   ctr_y.reshape([ctr_y.shape[0],1]) );//pred_ctr_y = dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]\r\n    const pred_w = widths.reshape([widths.shape[0],1]);  //pred_w = widths[:, np.newaxis]\r\n    const pred_h = tf.mul( tf.exp(dh), heights.reshape([heights.shape[0],1]) ); //pred_h = np.exp(dh) * heights[:, np.newaxis]\r\n\r\n    const x1 = pred_ctr_x.sub(tf.mul(0.5, pred_w) );\r\n    const y1 = pred_ctr_y.sub(tf.mul(0.5, pred_h) );\r\n    const x2 = pred_ctr_x.add(tf.mul(0.5, pred_w) );\r\n    const y2 = pred_ctr_y.add(tf.mul(0.5, pred_h) );\r\n\r\n    return tf.stack( [x1, y1, x2, y2], -2 ).reshape(deltas.shape);\r\n}\r\n\r\nexport function clip_boxes<T extends tf.Tensor, X extends number[]>(boxes: T, im_shape: X){\r\n// Clip boxes to image boundaries.\r\n// // x1 >= 0\r\n    const b1 = tf.maximum( tf.minimum (boxes.slice([0,0], [boxes.shape[0],1]), im_shape[1] -1), 0);\r\n// // y1 >= 0\r\n    const b2 = tf.maximum( tf.minimum (boxes.slice([0,1], [boxes.shape[0],1]), im_shape[0] -1), 0);\r\n// // x2 < im_shape[1]\r\n    const b3 = tf.maximum( tf.minimum (boxes.slice([0,2], [boxes.shape[0],1]), im_shape[1] -1), 0);\r\n// // y2 < im_shape[0]\r\n    const b4 = tf.maximum( tf.minimum (boxes.slice([0,3], [boxes.shape[0],1]), im_shape[0] -1), 0);\r\n\r\n    return tf.stack( [b1, b2, b3, b4], -2 ).reshape(boxes.shape) as tf.Tensor2D;\r\n\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport {nms} from \"../nms/nms\";\r\nimport { generate_anchors } from \"./generate_anchors\";\r\nimport {bbox_transform_inv, clip_boxes} from '../fast_rcnn/bbox_transform';\r\nimport {ravel} from \"../utils/ravel\";\r\nimport { argSort } from \"../utils/argsort\";\r\nimport { configInterface } from '../main';\r\n\r\nexport async function proposal_layer <T extends tf.Tensor4D>(cfg: configInterface, rpn_cls_prob_reshape: T, rpn_bbox_pred:T, im_info:T , test:string, _feat_stride = [16]){\r\n//different rpn_CLS_PROB\r\n    const _anchors = generate_anchors( 16, [0.5, 1, 2], cfg.ANCHOR_SCALES);\r\n\r\n    const _num_anchors = _anchors.shape[0];\r\n\r\n    if(rpn_cls_prob_reshape.shape[0] !== 1) console.error('Only single item batches are supported');\r\n    const [height, width] = [ rpn_cls_prob_reshape.shape[1], rpn_cls_prob_reshape.shape[2]  ];\r\n\r\n    const reshape = tf.reshape(rpn_cls_prob_reshape, [1, height, width, _num_anchors, 2]);\r\n\r\n    let scores = tf.slice(reshape, [0,0,0,0,1],[1, height, width, _num_anchors,1]).reshape([1, height, width, _num_anchors])\r\n\r\n    let bbox_deltas = rpn_bbox_pred.clone();\r\n    let shift_x = tf.range(0, width).mul(_feat_stride);\r\n    let shift_y = tf.range(0, height).mul(_feat_stride);\r\n    [shift_x, shift_y] = tf.meshgrid(shift_x, shift_y);\r\n    const shifts = tf.transpose(tf.stack([ravel(shift_x), ravel(shift_y), ravel(shift_x), ravel(shift_y)], 0));\r\n\r\n    const A = _num_anchors;\r\n    const K = shifts.shape[0];\r\n    let anchors = _anchors.reshape([1, A, 4]).add(shifts.reshape([1, K, 4]).transpose([1, 0, 2]) );\r\n    anchors = anchors.reshape([K * A, 4]);\r\n\r\n    bbox_deltas = bbox_deltas.reshape([-1, 4]);\r\n    scores = scores.reshape([-1, 1]);\r\n    anchors = anchors.cast('int32');\r\n    // Convert anchors into proposals via bbox transformations\r\n    let proposals = bbox_transform_inv(anchors, bbox_deltas);\r\n\r\n   // proposals.print()\r\n    // 2. clip predicted boxes to image\r\n\r\n    // @ts-ignore\r\n    proposals = clip_boxes(proposals, im_info.arraySync()[0].slice(0,2));//\r\n    let keep = await _filter_boxes(proposals, cfg.min_size * 1);\r\n    keep = ravel(keep);\r\n    proposals = tf.gather(proposals, keep.cast('int32'));\r\n    scores = tf.gather(scores, keep.cast('int32'));\r\n    bbox_deltas = tf.gather(bbox_deltas, keep.cast('int32'));\r\n\r\n    //scores.print()\r\n    let order = argSort(ravel(scores)).reverse();\r\n    if(cfg.pre_nms_topN > 0){\r\n        order = tf.slice(order,0, cfg.pre_nms_topN);\r\n    }\r\n    proposals = tf.gather(proposals, order.cast('int32'));\r\n\r\n    scores = tf.gather(scores, order.cast('int32'));\r\n\r\n    bbox_deltas = tf.gather(bbox_deltas, order.cast('int32'));\r\n\r\n    keep = await nms({ dets: proposals, scores: scores, thresh:cfg.nms_thresh, method: cfg.NMS_FUNCTION} );\r\n    console.table( tf.memory() );\r\n    if (cfg.post_nms_topN > 0 && keep.shape[0] > cfg.post_nms_topN){\r\n        keep = keep.slice(0, cfg.post_nms_topN);\r\n    }\r\n    proposals = tf.gather(proposals, keep.cast('int32')); //proposals = proposals[keep, :]\r\n    scores = tf.gather(scores, keep.cast('int32')); //scores = scores[keep]\r\n    bbox_deltas = tf.gather(bbox_deltas, keep.cast('int32')); //bbox_deltas=bbox_deltas[keep,:]\r\n    return [ ravel(scores.cast('float32')), proposals.cast('float32'), bbox_deltas];\r\n}\r\n\r\n\r\nfunction _filter_boxes<T extends tf.Tensor, X extends number>(boxes: T, min_size: X): Promise<tf.Tensor>{\r\n// Remove all boxes with any side smaller than min_size.\r\n    const _ws_part_one =  tf.slice(boxes, [0,2], [boxes.shape[0],1]).reshape([boxes.shape[0]])//.squeeze();\r\n    const _ws_part_two =  tf.slice(boxes, [0,0], [boxes.shape[0],1]).reshape([boxes.shape[0]])//.squeeze();\r\n    const ws = _ws_part_one.sub(_ws_part_two ).add(1);  // const ws = boxes[:, 2] - boxes[:, 0] + 1;\r\n\r\n    const _hs_part_one =  tf.slice(boxes, [0,3], [boxes.shape[0],1]).reshape([boxes.shape[0]])//.squeeze();\r\n    const _hs_part_two =  tf.slice(boxes, [0,1], [boxes.shape[0],1]).reshape([boxes.shape[0]])//.squeeze();\r\n    const hs = _hs_part_one.sub(_hs_part_two ).add(1);  // hs = boxes[:, 3] - boxes[:, 1] + 1\r\n\r\n    const cond_part_one = tf.greaterEqual(ws, min_size );\r\n    const cond_part_two = tf.greaterEqual(hs, min_size );\r\n\r\n    const bitwise = tf.logicalAnd(cond_part_one, cond_part_two);\r\n\r\n    return tf.whereAsync( bitwise ); // different result\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function resize_im(im: tf.Tensor3D, scale: number, max_scale: number |null): [tf.Tensor3D, number] {\r\n    let f = scale / Math.min(im.shape[0], im.shape[1]);\r\n    if (max_scale != null && f * Math.max(im.shape[0], im.shape[1]) > max_scale) {\r\n        f = max_scale / Math.max(im.shape[0], im.shape[1]);\r\n    }\r\n    const [newH, newW] = [ ~~(im.shape[0] * f), ~~(im.shape[1] * f)];\r\n    return [tf.image.resizeBilinear(im, [newH, newW]), f]\r\n}\r\n","export const TextLineCfg = {\r\n    SCALE: 600,\r\n    MAX_SCALE: 1200,\r\n    TEXT_PROPOSALS_WIDTH: 16,\r\n    MIN_NUM_PROPOSALS: 2,\r\n    MIN_RATIO: 0.5,\r\n    LINE_MIN_SCORE: 0.9,\r\n    MAX_HORIZONTAL_GAP: 50,\r\n    TEXT_PROPOSALS_MIN_SCORE: 0.7,\r\n    TEXT_PROPOSALS_NMS_THRESH: 0.2,\r\n    MIN_V_OVERLAPS: 0.7,\r\n    MIN_SIZE_SIM: 0.7,\r\n};\r\n\r\n\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\ntype graphType = tf.Tensor | tf.Tensor1D | tf.Tensor2D;\r\n\r\nexport class Graph{\r\n    graph: graphType;\r\n    constructor(graph: graphType) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async sub_graphs_connected(){\r\n        const sub_graphs = [];\r\n        for (let index = 0; index < this.graph.shape[0]; index++){\r\n\r\n            const firstCondition = this.graph.slice([0,index], [this.graph.shape[0],1]).reshape([this.graph.shape[0]]).any().logicalNot();\r\n            const secondCondition = this.graph.slice([index,0], [1 ,this.graph.shape[0]]).reshape([this.graph.shape[0]]).any();\r\n            const condition = tf.logicalAnd(firstCondition, secondCondition).arraySync();\r\n\r\n            if(condition) {\r\n                let v: number | tf.Tensor3D | tf.Tensor1D | tf.Tensor2D = index;\r\n                sub_graphs.push([v]);\r\n\r\n                while (tf.gather(this.graph, v).any().arraySync()){\r\n                    v = await tf.whereAsync(tf.gather(this.graph, v))\r\n                    v = v.arraySync()[0][0];\r\n                    sub_graphs[sub_graphs.length-1].push(v);\r\n                }\r\n            }\r\n        }\r\n        return sub_graphs;\r\n    }\r\n}\r\n","export function argmax(array: number[]): number{\r\n    return [].reduce.call(array, (_m: unknown, _c: never, _i: number, _arr: never[]) => _c > _arr[_m as number] ? _i : _m, 0) as number;\r\n}\r\n","import {TextLineCfg} from './TextLineCfg';\r\nimport {Graph} from './other';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {argmax} from '../utils/argmax';\r\nimport {ravel} from \"../utils/ravel\";\r\n\r\nexport class TextProposalGraphBuilder{\r\n    private text_proposals: number[][] ;\r\n    private boxes_table: any;\r\n    private im_size: number[];\r\n    private heights: number[];\r\n    private scores: tf.Tensor;\r\n    constructor() {\r\n        this.text_proposals= [[]];\r\n        this.im_size = [];\r\n        this.heights = [];\r\n        this.scores = tf.tensor([]);\r\n    }\r\n\r\n    get_successions(index: number){\r\n\r\n        const box = this.text_proposals[index];\r\n        const results=[];\r\n        for(let left = Math.round(box[0])+1; left < Math.min(Math.round(box[0]) + TextLineCfg.MAX_HORIZONTAL_GAP+1, this.im_size[1]); left++){ // for left in range(int(box[0])+1, min(int(box[0])+TextLineCfg.MAX_HORIZONTAL_GAP+1, self.im_size[1])):\r\n           const adj_box_indices = this.boxes_table[left]; // adj_box_indices=self.boxes_table[left]\r\n            for (let adj_box_index of adj_box_indices){\r\n                if (this.meet_v_iou(adj_box_index, index)) results.push(adj_box_index);\r\n            }\r\n\r\n            if (results.length!==0) return results;\r\n        }\r\n        return results;\r\n    }\r\n\r\n    get_precursors(index: number) {\r\n       const box = this.text_proposals[index];\r\n       const results = [];\r\n\r\n        for(let left = Math.round(box[0])-1; left > Math.max(Math.round(box[0] - TextLineCfg.MAX_HORIZONTAL_GAP), 0) -1; left--){\r\n            const adj_box_indices = this.boxes_table[left];\r\n            for (let adj_box_index of adj_box_indices){\r\n                if (this.meet_v_iou(adj_box_index, index)) results.push(adj_box_index);\r\n            }\r\n            if (results.length!==0) return results;\r\n        }\r\n        return results;\r\n    }\r\n\r\n    meet_v_iou(index1: number, index2: number){\r\n        const overlaps_v = (index1: number, index2: number) => {\r\n            const h1 = this.heights[index1];\r\n            const h2 = this.heights[index2];\r\n            const y0 = Math.max(this.text_proposals[index2][1], this.text_proposals[index1][1]);\r\n            const y1 = Math.min(this.text_proposals[index2][3], this.text_proposals[index1][3]);\r\n            return Math.max(0, y1-y0+1)/Math.min(h1, h2);\r\n        }\r\n\r\n        const size_similarity = (index1: number, index2: number) => {\r\n           const h1 = this.heights[index1]\r\n           const h2 = this.heights[index2]\r\n            return Math.min(h1, h2) / Math.max(h1, h2);\r\n        }\r\n\r\n        return overlaps_v(index1, index2)>=TextLineCfg.MIN_V_OVERLAPS && size_similarity(index1, index2)>=TextLineCfg.MIN_SIZE_SIM;\r\n    }\r\n\r\n    is_succession_node(index: number, succession_index: number) {\r\n        const precursors = this.get_precursors(succession_index);\r\n        return tf.greaterEqual(this.scores.gather(index), tf.max(this.scores.gather(precursors)) ).arraySync();// here\r\n    }\r\n    build_graph<T extends tf.Tensor>(text_proposals: T, scores: T, im_size: number[]){\r\n        this.text_proposals = text_proposals.arraySync() as number[][];\r\n        this.scores = ravel(scores);\r\n        this.im_size = im_size;\r\n        const h1 = text_proposals.slice([0,3], [text_proposals.shape[0],1]).reshape([text_proposals.shape[0]]);\r\n        const h2 = text_proposals.slice([0,1], [text_proposals.shape[0],1]).reshape([text_proposals.shape[0]]);\r\n        this.heights = tf.add(tf.sub(h1,h2), 1).arraySync() as number[];\r\n        const boxes_table =  Array.from(Array(im_size[1]), () => []);\r\n        this.text_proposals.forEach((item, index)=>{\r\n             // @ts-ignore\r\n            boxes_table[Math.round(item[0])].push(index);\r\n         })\r\n        this.boxes_table = boxes_table;\r\n        let graph = tf.buffer([text_proposals.shape[0], text_proposals.shape[0]], 'bool');\r\n        for(let index = 0; index < this.text_proposals.length; index++){\r\n            let successions = this.get_successions(index);\r\n            if (successions.length === 0) continue;\r\n\r\n            let succession_index;\r\n            if (successions.length > 1) {\r\n                succession_index = successions[argmax(this.scores.gather(successions).arraySync() as number[])];\r\n            }else {\r\n                succession_index = successions[0];\r\n            }\r\n\r\n           if (this.is_succession_node(index, succession_index)) {\r\n               graph.set(true, index, succession_index);\r\n            }\r\n\r\n        }\r\n        const _graph = graph.toTensor();\r\n        return new Graph(_graph);\r\n    }\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport {TextProposalGraphBuilder} from './TextProposalGraphBuilder';\r\nimport numeric from 'numeric';\r\n\r\n//reimplement this to tf\r\n\r\nclass poly1d{\r\n    argA: tf.Tensor;\r\n    argB: tf.Tensor;\r\n    constructor(args: tf.Tensor) {\r\n        this.argA = tf.gatherND(args,[0]);\r\n        this.argB = tf.gatherND(args,[1]);\r\n    }\r\n    solve(x: number){\r\n        // return this.argA * x + this.argB;\r\n        return this.argA.mul(x).add(this.argB);\r\n    }\r\n    get equation(){\r\n        return `${this.argA.arraySync()} x + ${this.argB.arraySync()};`\r\n    }\r\n}\r\n\r\nfunction polyfit<T extends tf.Tensor>(_x: T, _y: T, order: number){\r\n    let xArray = _x.arraySync() as number[];\r\n    let yArray = _y.arraySync() as number[];\r\n    if (xArray.length <= order) console.warn(\"Warning: Polyfit may be poorly conditioned.\")\r\n    let xMatrix = []\r\n    let yMatrix = yArray;//numeric.transpose([yArray])\r\n\r\n    for (let i = 0; i < xArray.length; i++) {\r\n        let temp = [];\r\n        for (let j = 0; j <= order; j++) {\r\n            temp.push(Math.pow(xArray[i], j));\r\n        }\r\n        xMatrix.push(temp);\r\n    }\r\n    let xMatrixT = numeric.transpose(xMatrix);\r\n    let dot1 = numeric.dot(xMatrixT, xMatrix);\r\n    let dot2 = numeric.dot(xMatrixT, yMatrix);\r\n    let dotInv = numeric.inv(<number[][]>dot1)\r\n    return tf.tensor(numeric.dot(dotInv, dot2)).reverse();\r\n}\r\n\r\nexport class TextProposalConnectorOriented{\r\n    graph_builder: TextProposalGraphBuilder;\r\n    constructor() {\r\n        this.graph_builder = new TextProposalGraphBuilder();\r\n    }\r\n\r\n    async group_text_proposals<T extends tf.Tensor>(text_proposals: T, scores: T, im_size: number[]){\r\n        const graph = this.graph_builder.build_graph(text_proposals, scores, im_size);\r\n        return await graph.sub_graphs_connected();\r\n    }\r\n\r\n    fit_y<T extends tf.Tensor>(X: T, Y: T, x1: T, x2: T){\r\n        if( X.gather(0).equal(X.sum().div(X.shape[0])).arraySync()){\r\n            return [tf.gatherND(Y,[0]), tf.gatherND(Y,[0])];\r\n        }\r\n        const p = new poly1d(polyfit(X, Y, 1));//p=np.poly1d(np.polyfit(X, Y, 1))\r\n        return [p.solve(x1.arraySync() as number), p.solve(x2.arraySync() as number)]\r\n    }\r\n\r\n    async get_text_lines<T extends tf.Tensor>(text_proposals: T, scores: T, im_size: number[]){\r\n       const tp_groups = await this.group_text_proposals(text_proposals, scores, im_size) as number[][];\r\n       //let text_lines = tf.zeros([tp_groups.length, 8], 'float32');\r\n       //console.log('text_lines shape:', text_lines.shape)\r\n       let text_lines = tf.buffer( [tp_groups.length, 8]);\r\n\r\n        tp_groups.forEach((tp_indices,index)=>{\r\n            const text_line_boxes = tf.gather(text_proposals, tp_indices);\r\n            //console.log(`index: ${index}`)\r\n            const X = tf.add(text_line_boxes.slice([0,0], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), text_line_boxes.slice([0,2], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]) ).div(2);// X = (text_line_boxes[:,0] + text_line_boxes[:,2]) / 2# 求每一个小框的中心x，y坐标\r\n            const Y = tf.add(text_line_boxes.slice([0,1], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), text_line_boxes.slice([0,3], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]) ).div(2);// X = (text_line_boxes[:,0] + text_line_boxes[:,2]) / 2# 求每一个小框的中心x，y坐标\r\n\r\n            const z1 = polyfit(X, Y, 1);\r\n\r\n            const x0 = tf.min(text_line_boxes.slice([0,0], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]])); //x0=np.min(text_line_boxes[:, 0])\r\n            const x1 = tf.max(text_line_boxes.slice([0,2], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]));\r\n            const offset = tf.sub( tf.gatherND(text_line_boxes, [0,2]), tf.gatherND(text_line_boxes, [0,0]) ).mul(0.5);//offset=(text_line_boxes[0, 2]-text_line_boxes[0, 0])*0.5\r\n            //offset.print();\r\n            const [lt_y, rt_y] = this.fit_y(text_line_boxes.slice([0,0], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), text_line_boxes.slice([0,1], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), x0.add(offset), x1.sub(offset));\r\n            const [lb_y, rb_y] = this.fit_y(text_line_boxes.slice([0,0], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), text_line_boxes.slice([0,3], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]), x0.add(offset), x1.sub(offset));\r\n            const score = scores.gather(tp_indices).sum().div(tp_indices.length);//score=scores[list(tp_indices)].sum()/float(len(tp_indices))\r\n            //score.print()\r\n            text_lines.set(x0.arraySync() as number, index, 0);//text_lines[index, 0]=x0\r\n            text_lines.set(tf.minimum(lt_y, rt_y).arraySync() as number, index, 1) //text_lines[index, 1]=min(lt_y, rt_y)#文本行上端 线段 的y坐标的小值\r\n            text_lines.set(x1.arraySync() as number, index, 2);//text_lines[index, 2]=x1\r\n            text_lines.set(tf.maximum(lb_y, rb_y).arraySync() as number, index, 3)//text_lines[index, 3]=max(lb_y, rb_y)#文本行下端 线段 的y坐标的大值\r\n            text_lines.set(score.arraySync() as number, index, 4);//text_lines[index, 4]=score#文本行得分\r\n            text_lines.set(z1.gather([0]).arraySync() as number, index, 5);//text_lines[index, 5]=z1[0]#根据中心点拟合的直线的k，b\r\n            text_lines.set(z1.gather([1]).arraySync() as number, index, 6); //text_lines[index, 6]=z1[1]\r\n            const height = tf.mean( text_line_boxes.slice([0,3], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]]).sub(text_line_boxes.slice([0,1], [text_line_boxes.shape[0],1]).reshape([text_line_boxes.shape[0]])) )\r\n            text_lines.set(height.add(2.5).arraySync() as number, index, 7);//text_lines[index, 7]= height + 2.5\r\n            //text_lines.toTensor().print()\r\n\r\n        });\r\n        const _text_lines = text_lines.toTensor();\r\n        let text_recs = tf.buffer( [text_lines.shape[0], 9] );\r\n        let index = 0;\r\n        for(let i = 0; i< text_lines.shape[0]; i++){\r\n\r\n            //const b1 = tf.sub(text_lines.get(i, 6), tf.div(text_lines.get(i, 7), 2) );\r\n            const b1 = tf.sub(tf.gatherND(_text_lines,[i, 6]), tf.div(tf.gatherND(_text_lines,[i, 7]), 2) );\r\n            const b2 = tf.add(tf.gatherND(_text_lines,[i, 6]), tf.div(tf.gatherND(_text_lines,[i, 7]), 2) );\r\n            let x1 = tf.gatherND(_text_lines,[i, 0]);//x1 = line[0]\r\n            let y1 = tf.gatherND(_text_lines,[i, 5]).mul(tf.gatherND(_text_lines,[i, 0])).add(b1);//y1 = line[5] * line[0] + b1\r\n            let x2 = tf.gatherND(_text_lines,[i, 2]);//x2 = line[2]\r\n            let y2 = tf.gatherND(_text_lines,[i, 5]).mul(tf.gatherND(_text_lines,[i, 2])).add(b1);\r\n            let x3 = tf.gatherND(_text_lines,[i, 0]);//x1 = line[3]\r\n            let y3 = tf.gatherND(_text_lines,[i, 5]).mul(tf.gatherND(_text_lines,[i, 0])).add(b2);//y3 = line[5] * line[0] + b2\r\n            let x4 = tf.gatherND(_text_lines,[i, 2]);//x4 = line[2]\r\n            let y4 = tf.gatherND(_text_lines,[i, 5]).mul(tf.gatherND(_text_lines,[i, 2])).add(b2);//y4 = line[5] * line[2] + b2\r\n            const disX = x2.sub(x1);//disX = x2 - x1\r\n            const disY = y2.sub(y1);//disY = y2 - y1\r\n            const width = tf.sqrt( tf.add (disX.mul(disX), disY.mul(disY)) );//width = np.sqrt(disX * disX + disY * disY)\r\n            const fTmp0 = y3.sub(y1);//fTmp0 = y3 - y1\r\n            const fTmp1 = fTmp0.mul(disY).div(width);//fTmp1 = fTmp0 * disY / width\r\n            const x = tf.abs(fTmp1.mul(disX).div(width) );//x = np.fabs(fTmp1 * disX / width)\r\n            const y = tf.abs(fTmp1.mul(disY).div(width) );//y = np.fabs(fTmp1 * disY / width)\r\n\r\n            if (tf.gatherND(_text_lines,[i, 5]).less(0).arraySync()){\r\n                x1 = x1.sub(x)//x1 -= x\r\n                y1 = y1.add(y);\r\n                x4 = x4.add(x);//x4 += x\r\n                y4 = y4.sub(y);\r\n            }else{\r\n                x2 = x2.add(x);//x2 += x\r\n                y2 = y2.add(y);\r\n                x3 = x3.sub(x);\r\n                y3 = y3.sub(y);\r\n            }\r\n            text_recs.set(x1.arraySync() as number, index, 0);\r\n            text_recs.set(y1.arraySync() as number, index, 1);\r\n            text_recs.set(x2.arraySync() as number, index, 2);\r\n            text_recs.set(y2.arraySync() as number, index, 3);\r\n            text_recs.set(x3.arraySync() as number, index, 4);\r\n            text_recs.set(y3.arraySync() as number, index, 5);\r\n            text_recs.set(x4.arraySync() as number, index, 6);\r\n            text_recs.set(y4.arraySync() as number, index, 7);\r\n            text_recs.set(tf.gatherND(_text_lines,[i, 4]).arraySync() as number, index, 8);\r\n            index+=1;\r\n\r\n        }\r\n\r\n        return text_recs.toTensor();\r\n    }\r\n\r\n}\r\n","import {TextProposalConnectorOriented} from \"./text_proposal_connector_oriented\";\r\nimport {TextLineCfg} from './TextLineCfg';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {nms} from '../nms/nms';\r\nimport {ravel} from \"../utils/ravel\";\r\nimport {argSort} from \"../utils/argsort\";\r\nimport {configInterface} from '../main';\r\n\r\nexport class TextDetector{\r\n    mode: string;\r\n    NMS_FUNCTION: string;\r\n    text_proposal_connector: TextProposalConnectorOriented;\r\n    constructor(cfg: configInterface){\r\n        this.mode = cfg.DETECT_MODE;\r\n        this.NMS_FUNCTION = cfg.NMS_FUNCTION;\r\n        //this.text_proposal_connector = (mode =='O') ? new textProposalConnectorOriented() : new textProposalConnectorOriented();\r\n        this.text_proposal_connector = new TextProposalConnectorOriented();\r\n    }\r\n\r\n    async detect<T extends tf.Tensor>(text_proposals: T, scores: T, size: number[]){\r\n        //console.log(this.text_proposal_connector)\r\n        const scoresFlat = ravel(scores);\r\n        let keep_inds: tf.Tensor1D | tf.Tensor2D = await tf.whereAsync(scoresFlat.greater(TextLineCfg.TEXT_PROPOSALS_MIN_SCORE));\r\n        keep_inds = ravel(keep_inds).cast('int32');\r\n        [text_proposals, scores] = [tf.gather(text_proposals, keep_inds), tf.gather(scores, keep_inds) ];\r\n        const sorted_indices = argSort(ravel(scores)).reverse().cast('int32'); // sorted_indices=np.argsort(scores.ravel())[::-1]\r\n        [text_proposals, scores] = [tf.gather(text_proposals, sorted_indices), tf.gather(scores, sorted_indices) ] // text_proposals, scores=text_proposals[sorted_indices], scores[sorted_indices]\r\n        keep_inds = await nms({ dets: text_proposals, scores: scores, thresh: TextLineCfg.TEXT_PROPOSALS_NMS_THRESH, method: this.NMS_FUNCTION} );\r\n        keep_inds = keep_inds.cast('int32');\r\n        [text_proposals, scores] = [tf.gather(text_proposals, keep_inds), tf.gather(scores, keep_inds) ];\r\n\r\n        const text_recs = await this.text_proposal_connector.get_text_lines(text_proposals, scores, size);// text_recs=self.text_proposal_connector.get_text_lines(text_proposals, scores, size)\r\n        keep_inds = await this.filter_boxes(text_recs);\r\n        const _keep_inds = keep_inds.unstack(1)[0];\r\n        return text_recs.gather(_keep_inds);\r\n\r\n    }\r\n\r\n    async filter_boxes<T extends tf.Tensor>(boxes: T){\r\n\r\n        let heights: tf.TensorBuffer<tf.Rank.R2> | tf.Tensor2D = tf.buffer( [boxes.shape[0], 1] );//heights=np.zeros((len(boxes), 1), np.float)\r\n        let widths: tf.TensorBuffer<tf.Rank.R2> | tf.Tensor2D = tf.buffer( [boxes.shape[0], 1] ); //widths=np.zeros((len(boxes), 1), np.float)\r\n        let scores: tf.TensorBuffer<tf.Rank.R2> | tf.Tensor2D = tf.buffer( [boxes.shape[0], 1] );//scores=np.zeros((len(boxes), 1), np.float)\r\n        let index = 0;\r\n        for(let i = 0; i < boxes.shape[0]; i++){\r\n            // @ts-ignore\r\n            heights.set( tf.abs(tf.gatherND(boxes,[i, 5]).sub(tf.gatherND(boxes,[i, 1]))).add(tf.abs(tf.gatherND(boxes,[i, 7]).sub(tf.gatherND(boxes, [i, 3]) ))).div(2.0).add(1).arraySync(), 0,index); // heights[index]=(abs(box[5]-box[1])+abs(box[7]-box[3]))/2.0+1\r\n            // @ts-ignore\r\n            widths.set( tf.abs(tf.gatherND(boxes,[i, 2]).sub(tf.gatherND(boxes,[i, 0]))).add(tf.abs(tf.gatherND(boxes,[i, 6]).sub(tf.gatherND(boxes, [i, 4]) ))).div(2.0).add(1).arraySync(), 0,index); // heights[index]=(abs(box[5]-box[1])+abs(box[7]-box[3]))/2.0+1\r\n            // @ts-ignore\r\n            scores.set(tf.gatherND(boxes,[i, 8]).arraySync(), 0,index)//scores[index] = box[8]\r\n\r\n            index+=1;\r\n        }\r\n        heights = heights.toTensor();\r\n        widths = widths.toTensor();\r\n        scores = scores.toTensor();\r\n        return tf.whereAsync( tf.logicalAnd( tf.greater(widths.div(heights), TextLineCfg.MIN_RATIO), scores.greater(TextLineCfg.LINE_MIN_SCORE) ).logicalAnd( widths.greater(tf.mul(TextLineCfg.TEXT_PROPOSALS_WIDTH, TextLineCfg.MIN_NUM_PROPOSALS)) ) );\r\n      }\r\n}\r\n\r\n// module.exports = TextDetector;\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function RGB2BGR<T extends tf.Tensor>(image: T){\r\n    return tf.reverse(image, -1);\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport {argmax} from \"../utils/argmax\";\r\nimport {configInterface} from '../main';\r\n\r\n\r\ninterface blobsInterface{\r\n    data :  tf.Tensor4D | null,\r\n    rois :  null | number | number[],\r\n    im_info: tf.Tensor3D | null\r\n}\r\n\r\nexport function _get_blobs(img: tf.Tensor3D, rois: number | null, cfg: configInterface): [blobsInterface, number[]]{\r\n    let blobs: blobsInterface = {\r\n        data : null,\r\n        rois : null,\r\n        im_info: null\r\n    };\r\n\r\n    const [_, im_scale_factors] = _get_image_blob(img, cfg);\r\n    blobs.data = _ as tf.Tensor4D;\r\n    return [blobs, im_scale_factors];\r\n}\r\n\r\n\r\nfunction _get_image_blob(im: tf.Tensor3D, cfg: configInterface): [tf.Tensor4D, number[]]{\r\n\r\n    let im_orig = im.cast('float32') as tf.Tensor3D;\r\n    im_orig = im_orig.sub(cfg.PIXEL_MEANS);\r\n\r\n    const im_shape = im_orig.shape;\r\n    const [w, h] = im_shape.slice(0,2);\r\n    const im_size_min = Math.min(w, h);\r\n    const im_size_max = Math.max(w,h);\r\n    const processed_ims = [];\r\n    const im_scale_factors = [];\r\n    for (let target_size of cfg.SCALES){\r\n        let im_scale = target_size / im_size_min;\r\n        // Prevent the biggest axis from being more than MAX_SIZE\r\n        if (Math.round(im_scale * im_size_max) > cfg.MAX_SIZE){\r\n            im_scale = cfg.MAX_SIZE / im_size_max;\r\n        }\r\n        console.log('==========>', im_orig, [~~(w * im_scale), ~~(h * im_scale)])\r\n        im = tf.image.resizeBilinear(im_orig, [~~(w * im_scale), ~~(h * im_scale)])\r\n        im_scale_factors.push(im_scale);\r\n        processed_ims.push(im);\r\n    }\r\n    // Create a blob to hold the input images\r\n    const blob = im_list_to_blob(processed_ims);\r\n    return [blob, im_scale_factors];\r\n}\r\n\r\nfunction im_list_to_blob(ims: Array<tf.Tensor3D>): tf.Tensor4D{\r\n\r\n    // Convert a list of images into a network input.\r\n    //\r\n    // Assumes images are already prepared (means subtracted, BGR order, ...).\r\n    const index = argmax(ims.map((im) => im.shape[0] * im.shape[1] * im.shape[2]));\r\n    const max_shape = ims[index].shape;\r\n\r\n    const num_images = ims.length;\r\n    let blob = tf.zeros([num_images, max_shape[0], max_shape[1], 3], 'float32').arraySync() as Array<Array<number[][]>>;\r\n\r\n    // for (let i in num_images){\r\n    //     const im = ims[i];\r\n    //     blob[i] = im.arraySync();\r\n    // }\r\n    for (let i = 0;i < num_images; i++){\r\n        const im = ims[i];\r\n        blob[i] = im.arraySync();\r\n    }\r\n\r\n    //blob = tf.tensor(blob);\r\n    return tf.tensor(blob);\r\n    //return blob;\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport { proposal_layer } from './rpn_msr/proposal_layer_tf';\r\nimport { resize_im } from \"./utils/resize\";\r\nimport { TextDetector } from './text_connector/detectors';\r\nimport { RGB2BGR } from './utils/RGB2BGR';\r\nimport { _get_blobs } from \"./fast_rcnn/inference_blob\";\r\nimport {GraphModel} from '@tensorflow/tfjs';\r\n\r\nexport interface configInterface extends Object{\r\n    NMS_FUNCTION: string,\r\n    ANCHOR_SCALES: number[],\r\n    PIXEL_MEANS: tf.Tensor,\r\n    SCALES: number[] ,\r\n    MAX_SIZE:  number,\r\n    HAS_RPN: true,\r\n    DETECT_MODE: string,\r\n    pre_nms_topN: number,\r\n    post_nms_topN: number,\r\n    nms_thresh: number,\r\n    min_size: number,\r\n}\r\n\r\nexport default class CTPN{\r\n    model: Promise<GraphModel>;\r\n    cfg: configInterface;\r\n    constructor(config: configInterface) {\r\n        this.model = tf.loadGraphModel('https://cdn.jsdelivr.net/gh/BadMachine/tfjs-text-detection-ctpn/ctpn_web/model.json'); //tf.loadGraphModel('file://./ctpn_web/model.json');\r\n        this.cfg = config;\r\n    }\r\n\r\n    async predict(image: HTMLImageElement): Promise<[tf.Tensor, number]>{\r\n        tf.engine().startScope()\r\n        const image_swapped = RGB2BGR(tf.browser.fromPixels(image, 3).cast('float32')) as tf.Tensor3D;\r\n        const [img, scale] = resize_im(image_swapped, 600, 1200);\r\n        const [blobs, im_scales] = _get_blobs(img as tf.Tensor3D, null, this.cfg);\r\n\r\n        if (this.cfg.HAS_RPN){\r\n            const im_blob = blobs.data as tf.Tensor4D;\r\n            blobs.im_info = tf.tensor( [[im_blob.shape[1], im_blob.shape[2], im_scales[0]]]);\r\n        }\r\n        const model = await this.model;\r\n        const raw = await model.executeAsync(img.expandDims());\r\n        const [cls_prob, box_pred] = raw as Array<tf.Tensor4D>;\r\n        let [scores, proposals, bbox_deltas] = await proposal_layer(this.cfg, cls_prob, box_pred, blobs.im_info as any,'TEST');\r\n        const boxes = tf.div(proposals, im_scales[0]); // bixes a bit different\r\n        const textDetector = new TextDetector(this.cfg);\r\n        const _boxes = await textDetector.detect(boxes, scores.reshape([scores.shape[0],1]), img.shape.slice(0,2));\r\n        _boxes.print();\r\n        return [_boxes, scale];\r\n        tf.engine().endScope()\r\n    }\r\n\r\n    async draw<T extends tf.Tensor>(canvas: HTMLCanvasElement, _boxes: T, scale: number, color: string){\r\n\r\n        const boxes = _boxes.arraySync() as number[][];\r\n        for(let box of boxes){\r\n\r\n            const ctx = canvas.getContext('2d');\r\n            ctx!.beginPath();\r\n            ctx!.strokeStyle = color;\r\n            ctx!.lineWidth = 4;\r\n            ctx!.moveTo(box[0]/ scale, box[1]/ scale);\r\n            ctx!.lineTo(box[2] / scale, box[3] / scale);\r\n\r\n            ctx!.lineTo(box[0] / scale, box[1] / scale);\r\n            ctx!.lineTo(box[4] / scale, box[5] / scale);\r\n\r\n            ctx!.lineTo(box[6] / scale, box[7] / scale);\r\n            ctx!.lineTo(box[2] / scale, box[3] / scale);\r\n\r\n            ctx!.stroke();\r\n            ctx!.closePath();\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport CTPN, {configInterface} from './main';\r\ntf.ENV.set('WEBGL_PACK', false)\r\n\r\nexport default class Demo extends React.Component{\r\n\t//private _canvasRef: any;// = React.createRef<HTMLCanvasElement | null>();\r\n\tprivate _canvasRef = React.createRef<HTMLCanvasElement | null | undefined>();\r\n\t//private _model: Promise<GraphModel>;\r\n\tprivate _canvas: HTMLCanvasElement | undefined;\r\n\tprivate _cfg: configInterface;\r\n\tprivate _model: CTPN;\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis._cfg = {\r\n\t\t\tNMS_FUNCTION: 'TF',\r\n\t\t\tANCHOR_SCALES: [16],\r\n\t\t\tPIXEL_MEANS: tf.tensor([[[102.9801, 115.9465, 122.7717]]]),\r\n\t\t\tSCALES: [600,] ,\r\n\t\t\tMAX_SIZE:  1000,\r\n\t\t\tHAS_RPN: true,\r\n\t\t\tDETECT_MODE: 'O',\r\n\t\t\tpre_nms_topN: 12000,\r\n\t\t\tpost_nms_topN: 2000,\r\n\t\t\tnms_thresh:0.7,\r\n\t\t\tmin_size: 8,\r\n\t\t};\r\n\t\tthis._model = new CTPN(this._cfg);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis._canvas = this._canvasRef.current as HTMLCanvasElement;\r\n\t}\r\n\r\n\r\n\r\n\tonUpload(event: any){\r\n\t\tconst reader = new FileReader();\r\n\t\tconst file = event.target.files[0];\r\n\t\tif (!file.type.match('image.*')){\r\n\t\t\tconsole.error('not an image');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treader.readAsDataURL(file);\r\n\t\tconst canvas = this._canvas;\r\n\r\n\t\treader.onload = (fileEvent)=> {\r\n\r\n\t\t\tconst ctx = canvas!.getContext('2d');\r\n\t\t\tconst img = new Image();\r\n\t\t\t//img.src = event.target!.result as string;\r\n\t\t\timg.src = fileEvent.target!.result as string;\r\n\t\t\timg.onload = async () => {\r\n\t\t\t\tif (img.complete) {\r\n\t\t\t\t\tcanvas!.width = img.width;\r\n\t\t\t\t\tcanvas!.height = img.height;\r\n\t\t\t\t\tconst [predictions, scale] = await this._model.predict(img);\r\n\t\t\t\t\tctx!.drawImage(img, 0, 0);\r\n\t\t\t\t\tawait this._model.draw(canvas as HTMLCanvasElement, predictions as tf.Tensor, scale, 'red');\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<>\r\n\t\t\t<h1> Text detection CTPN-React demo </h1>\r\n\t\t\t<div className={'viewPort'} style={{minHeight: '300px', minWidth: '400px'}}>\r\n\t\t\t\t{/*@ts-ignore*/}\r\n\t\t\t<canvas ref={this._canvasRef}/>\r\n\t\t\t</div>\r\n\t\t\t<input type=\"file\" onChange={(event:React.FormEvent<HTMLInputElement>) => this.onUpload.apply(this, [event])} />\r\n\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Demo from './demo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n  <Demo> </Demo>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}